# -*- coding: utf-8 -*-
"""finalexam2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uydw1crq2CyLh_3YyDxjJGj3uGZpKDCX
"""

import numpy as np
import cv2

img = cv2.imread('0003.png')
imgGry = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

ret , thrash = cv2.threshold(imgGry, 240 , 255, cv2.CHAIN_APPROX_NONE)
contours , hierarchy = cv2.findContours(thrash, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

count_circles = -1;
count_triangles = 0;
count_rectangles = 0;
count_umbrella = 0;


for contour in contours:
    approx = cv2.approxPolyDP(contour, 0.01* cv2.arcLength(contour, True), True)
    cv2.drawContours(img, [approx], 0, (0, 0, 0), 5)
    x = approx.ravel()[0]
    y = approx.ravel()[1] 

    if len(approx) == 3:
        cv2.putText( img, "Triangle", (x, y), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 0) )
        count_triangles+=1
    elif len(approx) == 4 :
        cv2.putText(img, "rectangle", (x, y), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 0))
        count_rectangles+=1
    elif len(approx) ==14 :
        cv2.putText(img, "umbrella", (x, y), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 0))
        count_umbrella+=1
    else:
        cv2.putText(img, "circle", (x, y), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 0))
        count_circles+=1

print("count_circles = ",count_circles)
print("count_triangles = ",count_triangles)
print("count_rectangles",count_rectangles)
print("count_umbrella = ",count_umbrella)

plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))

plt.show()
cv2.waitKey(0)
cv2.destroyAllWindows()